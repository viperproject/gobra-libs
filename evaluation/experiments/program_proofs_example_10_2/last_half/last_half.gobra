// This package contains the last half of the proof for InsertCorrect from
// https://github.com/viperproject/program-proofs-gobra/blob/main/chapter10/examples_10.2.gobra
package last_half

// Note that some parts that come after the induction hypothesis require
// definitions that originally came before the IH.
// Those dependencies are included at their original position.
ghost
requires pq.Valid()
ensures let pqPrime := pq.Insert(y) in
	pqPrime.Valid() &&
	pqPrime.Elements() == pq.Elements() union mset[int]{y}
decreases len(pq)
pure func (pq PQueue) InsertCorrect(y int) Unit {
	return match pq {
		case Leaf{}:
			Unit{}
	case Node{?x, ?l, ?r}:
		let pqPrime := pq.Insert(y) in
		let max := y < x ? x : y in
		let _ := r.InsertCorrect(max) in
		let newRight := r.Insert(max) in
		let _ := asserting(newRight.Valid()) in
		let _ := asserting(newRight.IsBalanced()) in
		let _ := asserting(l.IsBalanced()) in
		let _ := asserting(
			let Lprime := len(newRight.Elements()) in
			let Rprime := len(l.Elements()) in
			Lprime == Rprime || Lprime == Rprime + 1) in
		let _ := asserting(pqPrime.IsBalanced()) in
		asserting(pqPrime.IsBinaryHeap())
	}
}

ghost
decreases len(pq)
pure func (pq PQueue) Valid() bool {
	return pq.IsBinaryHeap() && pq.IsBalanced()
}

ghost
decreases len(pq)
pure func (pq PQueue) Insert(y int) PQueue {
	return match pq {
		case Leaf{}:
			Node{y, Leaf{}, Leaf{}}
		case Node{?x, ?left, ?right}:
			y < x ? Node{y, right.Insert(x), left} : Node{x, right.Insert(y), left}
	}
}

ghost
decreases len(pq)
pure func (pq PQueue) Elements() mset[int] {
	return match pq {
		case Leaf{}:
			mset[int]{}
		case Node{?x, ?left, ?right}:
			mset[int]{x} union left.Elements() union right.Elements()
	}
}

ghost
decreases len(pq)
pure func (pq PQueue) IsBalanced() (res bool) {
	return match pq {
		case Leaf{}:
			true
		case Node{_, ?left, ?right}:
			left.IsBalanced() && right.IsBalanced() &&
			(let L := len(left.Elements()) in
			let R := len(right.Elements()) in
			L == R || L == R + 1)
	}
}

ghost
decreases len(pq)
pure func (pq PQueue) IsBinaryHeap() bool {
	return match pq {
		case Leaf{}:
			true
		case Node{?x, ?left, ?right}:
			left.IsBinaryHeap() && right.IsBinaryHeap() &&
			(left == Leaf{} || x <= left.x) &&
			(right == Leaf{} || x <= right.x)
	}
}


type Unit struct{}

ghost
requires b
decreases
pure func asserting(b bool) Unit {
	return Unit{}
}

ghost type PQueue = BraunTree

ghost type BraunTree adt {
	Leaf {}

	Node {
		x int
		left BraunTree
		right BraunTree
	}
}
