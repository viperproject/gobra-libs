// Copyright 2025 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package resalgebra

var _ RA = TypeAuthRA{}
var AuthRA TypeAuthRA = TypeAuthRA{}

type IntWithTopBot interface {}
type Top struct{}
type Bottom struct{}
type Int struct {
	V int
}

type AuthCarrier struct {
	Fst IntWithTopBot
	Snd int
}

type TypeAuthRA struct{}

ghost
decreases
pure func AuthView(m int) Elem {
	return AuthCarrier{Int{m}, 0}
}

ghost
decreases
pure func FragView(m int) Elem {
	return AuthCarrier{Bottom{}, m}
}


ghost
decreases
pure func (ra TypeAuthRA) IsElem(e Elem) (res bool) {
	return typeOf(e) == type[AuthCarrier] &&
		let c := e.(AuthCarrier) in
		c.Fst === Bottom{} ||
		c.Fst === Top{}    ||
		typeOf(c.Fst) == type[Int]
}

ghost
requires ra.IsElem(e)
decreases
pure func (ra TypeAuthRA) IsValid(e Elem) bool {
	return let x := e.(AuthCarrier) in
		x.Fst === Bottom{} ||
		(typeOf(x.Fst) == type[Int] && x.Fst.(Int).V >= x.Snd)
}

ghost
requires ra.IsElem(e)
ensures  res !== none[Elem] ==> ra.IsElem(get(res))
decreases
pure func (ra TypeAuthRA) Core(e Elem) (ghost res option[Elem]) {
	return let x := e.(AuthCarrier) in
		some(Elem(AuthCarrier{Bottom{}, x.Snd}))
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
ensures  ra.IsElem(res)
decreases
pure func (ra TypeAuthRA) Compose(e1 Elem, e2 Elem) (res Elem) {
	return let c1 := e1.(AuthCarrier) in
		let c2 := e2.(AuthCarrier)    in
		(c1.Fst === Bottom{} ?
			AuthCarrier{c2.Fst, max(c1.Snd, c2.Snd)} :
			(c2.Fst === Bottom{} ?
				AuthCarrier{c1.Fst, max(c1.Snd, c2.Snd)} :
				AuthCarrier{Top{}, max(c1.Snd, c2.Snd)}))
}

ghost
decreases
pure func max(a int, b int) int {
	return a > b ? a : b
}

// proofs commented out, termiation is a problem
ghost
requires ra.IsElem(e1) && ra.IsElem(e2) && ra.IsElem(e3)
ensures  ra.Compose(ra.Compose(e1, e2), e3) === ra.Compose(e1, ra.Compose(e2, e3))
decreases
func (ra TypeAuthRA) ComposeAssoc(e1 Elem, e2 Elem, e3 Elem) {
	// proved
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
ensures  ra.Compose(e1, e2) === ra.Compose(e2, e1)
decreases
func (ra TypeAuthRA) ComposeComm(e1 Elem, e2 Elem) {
	// proved
}

ghost
requires ra.IsElem(e)
ensures  let c := ra.Core(e) in
	c !== none[Elem] ==> ra.Compose(get(c), e) === e
decreases
func (ra TypeAuthRA) CoreId(e Elem) {
	// proved
}

ghost
requires ra.IsElem(e)
requires ra.Core(e) !== none[Elem]
ensures  let c := ra.Core(e) in
	let cc := ra.Core(get(c)) in
	cc !== none[Elem] &&
	get(cc) === get(c)
decreases
func (ra TypeAuthRA) CoreIdem(e Elem) {
	// proved
}

// perf problems, body left out; check triggers everywhere for this def
ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
requires ra.Core(e1) !== none[Elem]
requires exists e3 Elem :: { ra.IsElem(e3) } ra.IsElem(e3) && e2 === ra.Compose(e1, e3)
ensures  ra.Core(e2) !== none[Elem]
ensures  exists e4 Elem :: { ra.IsElem(e4) } ra.IsElem(e4) && get(ra.Core(e2)) === ra.Compose(get(ra.Core(e1)), e4)
decreases
func (ra TypeAuthRA) CoreMono(e1 Elem, e2 Elem) {
	// proved
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
requires ra.IsValid(ra.Compose(e1, e2))
ensures  ra.IsValid(e1)
decreases
func (ra TypeAuthRA) ValidOp(e1 Elem, e2 Elem) {
	// proved
}