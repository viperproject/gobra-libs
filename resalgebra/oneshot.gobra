// Copyright 2025 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package resalgebra

type Pending struct{}

type Shot struct {
	N int
}

type Fail struct{}

type TypeOneShotRA struct{}

TypeOneShotRA implements RA

var OneShotRA TypeOneShotRA = TypeOneShotRA{}

ghost
decreases
pure
func (ra TypeOneShotRA) IsElem(e Elem) (res bool) {
	return e != nil &&
		// using typeOf here leads to unexpected incompletnesses
		(e === Elem(Pending{})) ||
		typeOf(e) == type[Shot] ||
		// using typeOf here leads to unexpected incompletnesses
		(e === Fail{})
}


ghost
requires ra.IsElem(e)
decreases
pure
func (ra TypeOneShotRA) IsValid(e Elem) bool {
	return e != nil &&
		(typeOf(e) == type[Pending] || typeOf(e) == type[Shot])
}

ghost
requires ra.IsElem(e)
ensures  res !== none[Elem] ==> ra.IsElem(get(res))
decreases
pure
func (ra TypeOneShotRA) Core(e Elem) (ghost res option[Elem]) {
	return typeOf(e) == type[Pending] ?
		none[Elem] :
		some(e)
}


ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
ensures  ra.IsElem(res)
decreases
pure
func (ra TypeOneShotRA) Compose(e1 Elem, e2 Elem) (res Elem) {
	return typeOf(e1) == type[Shot] && typeOf(e2) == type[Shot] && e1 === e2 ?
		e1 :
		Elem(Fail{})
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2) && ra.IsElem(e3)
ensures  ra.Compose(ra.Compose(e1, e2), e3) === ra.Compose(e1, ra.Compose(e2, e3))
decreases
func (ra TypeOneShotRA) ComposeAssoc(e1 Elem, e2 Elem, e3 Elem) {
	// proved
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
ensures  ra.Compose(e1, e2) === ra.Compose(e2, e1)
decreases
func (ra TypeOneShotRA) ComposeComm(e1 Elem, e2 Elem) {
	// proved
}

ghost
requires ra.IsElem(e)
ensures  let c := ra.Core(e) in
	c !== none[Elem] ==> ra.Compose(get(c), e) === e
decreases
func (ra TypeOneShotRA) CoreId(e Elem) {
	// proved
}

ghost
requires ra.IsElem(e)
requires ra.Core(e) !== none[Elem]
ensures  let c := ra.Core(e) in
	c !== none[Elem] &&
	let cc := ra.Core(get(c)) in
	cc !== none[Elem] &&
	get(cc) === get(c)
decreases
func (ra TypeOneShotRA) CoreIdem(e Elem) {
	// proved
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
requires ra.Core(e1) !== none[Elem]
requires exists e3 Elem :: { ra.IsElem(e3) } ra.IsElem(e3) && e2 === ra.Compose(e1, e3)
ensures  ra.Core(e2) !== none[Elem]
ensures  exists e4 Elem :: { ra.IsElem(e4) } ra.IsElem(e4) && get(ra.Core(e2)) === ra.Compose(get(ra.Core(e1)), e4)
decreases
func (ra TypeOneShotRA) CoreMono(e1 Elem, e2 Elem) {
	// proved
}

ghost
requires ra.IsElem(e1) && ra.IsElem(e2)
requires ra.IsValid(ra.Compose(e1, e2))
ensures  ra.IsValid(e1)
decreases
func (ra TypeOneShotRA) ValidOp(e1 Elem, e2 Elem) {
	// proved
}



